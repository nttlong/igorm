package vdi

import (
	"fmt"
	"reflect"
)

func resolveByType(container Container, t any) (any, error) {
	typ := reflect.TypeOf(t)
	if typ == nil {
		return nil, fmt.Errorf("cannot resolve nil type")
	}
	if typ.Kind() != reflect.Ptr {
		return nil, fmt.Errorf("type must be a pointer, got %v", typ)
	}
	return container.ResolveByType(typ)
}

func TypeOf[T any]() reflect.Type {
	var zero T
	return reflect.TypeOf(zero)
}

func Resolve[T any](c Container) (T, error) {
	typ := TypeOf[T]()
	obj, err := c.ResolveByType(typ)
	if err != nil {
		var zero T
		return zero, err
	}
	return obj.(T), nil
}
