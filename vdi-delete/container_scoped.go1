package vdi

import (
	"reflect"
	"sync"
)

type ScopedContainer struct {
	parent    Container
	instances map[reflect.Type]any
	providers map[reflect.Type]func(Container) any
	lock      sync.RWMutex
}

func NewScopedContainer(parent Container) Container {
	return &ScopedContainer{
		parent:    parent,
		instances: make(map[reflect.Type]any),
		providers: make(map[reflect.Type]func(Container) any),
	}
}

func (c *ScopedContainer) RegisterScopedType(t reflect.Type, factory func(Container) any) {
	c.lock.Lock()
	defer c.lock.Unlock()
	c.providers[t] = factory
}

func (c *ScopedContainer) ResolveByType(t reflect.Type) (any, error) {
	c.lock.RLock()
	instance, ok := c.instances[t]
	c.lock.RUnlock()
	if ok {
		return instance, nil
	}

	c.lock.Lock()
	defer c.lock.Unlock()

	// Check lại tránh race
	if instance, ok := c.instances[t]; ok {
		return instance, nil
	}

	provider, ok := c.providers[t]
	if ok {
		instance := provider(c)
		c.instances[t] = instance
		return instance, nil
	}

	// Fallback to parent
	return c.parent.ResolveByType(t)
}

func (c *ScopedContainer) CreateScope() Container {
	// Nested scope? Optional
	return NewScopedContainer(c)
}

func (c *ScopedContainer) Dispose() error {
	// Optional cleanup
	panic("Dispose not implemented for ScopedContainer")
}
