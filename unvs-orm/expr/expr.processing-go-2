package expr

import (
	"bytes"
	"strings"
	"sync"
)

type ExprConfig struct {
	keywords             map[string]bool
	funcWhitelist        map[string]bool
	cacheQuoteExpression sync.Map
	bufferPool           sync.Pool
}

type ExprQuoteResult struct {
	QuotedSQL string
	Literals  []string
}

func NewExprConfig() *ExprConfig {
	return &ExprConfig{
		bufferPool: sync.Pool{
			New: func() any {
				return new(bytes.Buffer)
			},
		},
	}
}

func (c *ExprConfig) init() {
	if c.funcWhitelist == nil {
		c.funcWhitelist = map[string]bool{
			"min": true, "max": true, "abs": true, "len": true,
		}
	}
	if c.keywords == nil {
		c.keywords = map[string]bool{
			"as": true, "and": true, "or": true, "not": true,
			"case": true, "when": true, "then": true, "else": true, "end": true,
		}
	}
}

func (cfg *ExprConfig) QuoteExpression(expr string) string {
	cfg.init()
	if v, ok := cfg.cacheQuoteExpression.Load(expr); ok {
		return v.(string)
	}
	res := cfg.quoteAndExtract(expr)
	buf := cfg.bufferPool.Get().(*bytes.Buffer)
	buf.Reset()
	defer cfg.bufferPool.Put(buf)

	for i, lit := range res.Literals {
		buf.WriteByte('<')
		cfg.appendInt(buf, i)
		buf.WriteByte('>')
		ph := buf.String()
		res.QuotedSQL = strings.ReplaceAll(res.QuotedSQL, ph, "'"+lit+"'")
		buf.Reset()
	}

	res.QuotedSQL = strings.ReplaceAll(res.QuotedSQL, "[", "`")
	res.QuotedSQL = strings.ReplaceAll(res.QuotedSQL, "]", "`")
	cfg.cacheQuoteExpression.Store(expr, res.QuotedSQL)
	return res.QuotedSQL
}

func (cfg *ExprConfig) quoteAndExtract(expr string) ExprQuoteResult {
	buf := cfg.bufferPool.Get().(*bytes.Buffer)
	buf.Reset()
	defer cfg.bufferPool.Put(buf)

	literals := make([]string, 0, 4)
	placeholderIdx := 0
	tmp := [64]byte{}

	data := []byte(expr)
	for i := 0; i < len(data); {
		ch := data[i]

		// Literal
		if ch == '\'' {
			start := i + 1
			i++
			for i < len(data) && data[i] != '\'' {
				i++
			}
			end := i
			if i < len(data) {
				i++
			}
			literals = append(literals, string(data[start:end]))
			cfg.writePlaceholder(buf, placeholderIdx)
			placeholderIdx++
			continue
		}

		// Identifiers
		if isIdentStart(ch) {
			j := i
			k := 0
			for j < len(data) && isIdentChar(data[j]) {
				tmp[k] = data[j]
				k++
				j++
			}
			ident := string(tmp[:k])
			isFunc := j < len(data) && data[j] == '('

			if cfg.keywords[strings.ToLower(ident)] || (isFunc && cfg.funcWhitelist[ident]) {
				buf.WriteString(ident)
			} else if dot := strings.IndexByte(ident, '.'); dot != -1 {
				parts := strings.Split(ident, ".")
				for idx, part := range parts {
					if idx > 0 {
						buf.WriteByte('.')
					}
					buf.WriteByte('`')
					buf.WriteString(part)
					buf.WriteByte('`')
				}
			} else {
				buf.WriteByte('`')
				buf.WriteString(ident)
				buf.WriteByte('`')
			}
			i = j
			continue
		}

		buf.WriteByte(ch)
		i++
	}

	return ExprQuoteResult{
		QuotedSQL: buf.String(),
		Literals:  literals,
	}
}

func (cfg *ExprConfig) writePlaceholder(buf *bytes.Buffer, i int) {
	buf.WriteByte('<')
	cfg.appendInt(buf, i)
	buf.WriteByte('>')
}

func (cfg *ExprConfig) appendInt(buf *bytes.Buffer, i int) {
	if i == 0 {
		buf.WriteByte('0')
		return
	}
	tmp := [10]byte{}
	pos := len(tmp)
	for i > 0 {
		pos--
		tmp[pos] = '0' + byte(i%10)
		i /= 10
	}
	buf.Write(tmp[pos:])
}

func isIdentStart(ch byte) bool {
	return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || ch == '_'
}

func isIdentChar(ch byte) bool {
	return isIdentStart(ch) || (ch >= '0' && ch <= '9') || ch == '.'
}
