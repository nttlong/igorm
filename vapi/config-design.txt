He thong can phai co 1 dich vu doc thong tin trong file yaml
Cu the la noi dung cua file config.yaml nhu sau:
 Cache:
    - Redis:
    .... khai bao cho Redis <-- cac thomng tin sao cho co the ket noi vao redis
    - Memcached:
    .... khai bao cho Memcached  <-- cac thong tin sao cho co the ket noi vao memcache
    - Bagger:
    .... khai bao cho Bagger
    cacheType: Redis hoac Memcached hoac Bagger, mac dinh la in-memory cache <-- Neu nhu trien khai chon loai hinh cache nao thi chi can khai bao trong config.yaml
    <!-- khi app start, can cu vao cacheType dich vu cache se doc thong tin tuong ung trong cac khai bao phia trien
    tu dong khoi tao-->
    // su dung thu vien vcache
    // thu vien vcache da co san cac ham nhu sau:
    // NewInMemoryCache tạo một instance mới của InMemoryCache
// use "github.com/patrickmn/go-cache"
    func NewInMemoryCache( //<-- khoi tao memcache

        defaultExpiration,
        cleanupInterval time.Duration) Cache { //<-- Cache la 1 interface, da de cap trong phan thu vien

        //strHasKey is string version of hashKey

        // for in-memory cache, default expiration and cleanup interval are ignored
        return &InMemoryCache{ //<-- 
            client: gocache.New(defaultExpiration, cleanupInterval),
        } // no check error here, so just return nil
    }
    // tung gtu voi Memcached
    func NewMemcachedCache(strServers string, prefixKey string) Cache {
        once.Do(func() {
            servers := strings.Split(strServers, ",")
            mcClient = memcache.New(servers...)
        })

        return &MemcachedCache{
            client:    mcClient,
            prefixKey: prefixKey,
        }
    }
    // NewRedisCache tạo một instance mới của RedisCache.
// addr là địa chỉ của Redis server (ví dụ: "localhost:6379").
// password là mật khẩu Redis, db là số database (0-15).
func NewRedisCache(
	//ctx context.Context,

	addr, password string,
	prefixKey string,
	db int,
	timeOut time.Duration) Cache {

        rdb := redis.NewClient(&redis.Options{
            Addr:     addr,
            Password: password, // no password set
            DB:       db,       // use default DB
        })

        // Ping để kiểm tra kết nối
        // _, err := rdb.Ping(ctx).Result()
        // if err != nil {
        // 	fmt.Printf("Lỗi khi kết nối đến Redis: %v\n", err)
        // 	// Trong ứng dụng thực tế, bạn có thể muốn panic hoặc trả về error ở đây.
        // }
        return &RedisCache{client: rdb, prefixKey: prefixKey}
    }

Database:
    - MySQL:
    .... khai bao cho MySQL
    - PostgreSQL:
    .... khai bao cho PostgreSQL
    - sqlserver:
    .... khai bao cho sqlserver
    driverType: MySQL hoac PostgreSQL hoac sqlserver <-- Neu nhu trien khai chon loai hinh database nao thi chi can khai bao trong config.yaml
// voi database thi su dung thu vien vdb
co ham vdb.Open(driver,dsn)->vdb.TenantBB,error

luu y1: cache la 1 interface daduoc implement kg can code lai, chi can su dung
type Cache interface {

	// get object from cache
	// example: Get("key", &obj)
	// @description: This function will combine  key and package path of object and name of object type to create a unique key for cache.
	// @param key: string, key of object in cache, actually it is a part of real cache key
	Get(ctx context.Context, key string, dest interface{}) bool // Lấy giá trị từ cache

	// @description: This function will combine  key and package path of object and name of object type to create a unique key for cache.
	// @param key: string, key of object in cache, actually it is a part of real cache key
	// @param value: interface{}, value of object to store in cache
	// @param ttl: time.Duration, time to live of object in cache 0 is default value which means no expiration
	Set(ctx context.Context, key string, value interface{}, ttl time.Duration) // Đặt giá trị vào cache với TTL
	// Đặt giá trị vào cache với TTL
	Delete(ctx context.Context, key string) // Xóa một key khỏi cache
	Close() error                           // Đóng kết nối/giải phóng tài nguyên của cache
}
