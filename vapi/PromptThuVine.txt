// dua vao test duoi day cua thu vein vdi
package vdi_test

import (
	"testing"

	vdi "vdi"

	"github.com/stretchr/testify/assert"
)

type Logger struct {
	ID string
}

func BenchmarkTestScoped_ReuseWithinScope(b *testing.B) {
	root := vdi.NewRootContainer()
	root.RegisterScoped(func() *Logger {
		return &Logger{ID: "scoped"}
	})
	scope := root.CreateScope()
	t := vdi.TypeOf[*Logger]()

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, _ = scope.ResolveByType(t)
	}
}

func BenchmarkTestTransient_AlwaysNew(b *testing.B) {
	root := vdi.NewRootContainer()
	root.RegisterTransient(func() *Logger {
		return &Logger{ID: "transient"}
	})
	scope := root.CreateScope()
	t := vdi.TypeOf[*Logger]()

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, _ = scope.ResolveByType(t)
	}
}

func TestSingleton_SameEverywhere(t *testing.T) {
	root := vdi.NewRootContainer()
	root.RegisterSingleton(func() *Logger {
		return &Logger{ID: "singleton"}
	})

	scope1 := root.CreateScope()
	scope2 := root.CreateScope()

	l1, _ := scope1.ResolveByType(vdi.TypeOf[*Logger]())
	l2, _ := scope2.ResolveByType(vdi.TypeOf[*Logger]())
	l3, _ := root.ResolveByType(vdi.TypeOf[*Logger]())

	assert.Same(t, l1, l2)
	assert.Same(t, l1, l3)
}
func BenchmarkTestSingleton_SameEverywhere(t *testing.B) {
	root := vdi.NewRootContainer()
	root.RegisterSingleton(func() *Logger {
		return &Logger{ID: "singleton"}
	})
	for i := 0; i < t.N; i++ {

		scope1 := root.CreateScope()
		scope2 := root.CreateScope()

		l1, _ := scope1.ResolveByType(vdi.TypeOf[*Logger]())
		l2, _ := scope2.ResolveByType(vdi.TypeOf[*Logger]())
		l3, _ := root.ResolveByType(vdi.TypeOf[*Logger]())

		assert.Same(t, l1, l2)
		assert.Same(t, l1, l3)
	}
}
func TestScoped_UniquePerScope(t *testing.T) {
	root := vdi.NewRootContainer()
	root.RegisterScoped(func() *Logger {
		return &Logger{ID: "scoped"}
	})

	scope1 := root.CreateScope()
	scope2 := root.CreateScope()

	l1, _ := scope1.ResolveByType(vdi.TypeOf[*Logger]())
	l2, _ := scope1.ResolveByType(vdi.TypeOf[*Logger]()) // same as l1
	l3, _ := scope2.ResolveByType(vdi.TypeOf[*Logger]()) // different

	assert.Same(t, l1, l2)
	assert.NotSame(t, l1, l3)
}
func BenchmarkTestScoped_UniquePerScope(t *testing.B) {
	root := vdi.NewRootContainer()
	root.RegisterScoped(func() *Logger {
		return &Logger{ID: "scoped"}
	})
	for i := 0; i < t.N; i++ {
		scope1 := root.CreateScope()
		scope2 := root.CreateScope()

		l1, _ := scope1.ResolveByType(vdi.TypeOf[*Logger]())
		l2, _ := scope1.ResolveByType(vdi.TypeOf[*Logger]()) // same as l1
		l3, _ := scope2.ResolveByType(vdi.TypeOf[*Logger]()) // different

		assert.Same(t, l1, l2)
		assert.NotSame(t, l1, l3)
	}
}

func TestTransient_AlwaysNew(t *testing.T) {
	root := vdi.NewRootContainer()
	root.RegisterTransient(func() *Logger {
		return &Logger{ID: "transient"}
	})

	scope := root.CreateScope()

	l1, _ := scope.ResolveByType(vdi.TypeOf[*Logger]())
	l2, _ := scope.ResolveByType(vdi.TypeOf[*Logger]())

	assert.NotSame(t, l1, l2)
}
// va thu vien cache da duoc viet san
// internal/app/cache/cache.go
package vcache

import (
	"context"
	"time"
)

/*
this interface provide basic cache operations
In order to
Usage:

	1- Create a new instance with InMemoryCache
		var cache vcache.Cache
		cache = vcache.NewInMemoryCache(10*time.Second, 10*time.Second)
	2- Create a new Cache with Bagger:
		var cache vcache.Cache
		cache, err := vcache.NewBadgerCache(<path to db>,  <prefix key>)
	3- Create a new Cache with Redis:
	   var cache vcache.Cache
		cache = vcache.NewRedisCache(<server>, <password>, <prefix key>, 0, 10*time.Second)
	4- Create a new Cache with Memcached:
		var cache vcache.Cache
		cache = vcache.NewMemcachedCache([server1, server2], <prefix key>)
	Heed: all cache implementations were already tested and proven to work correctly.
*/
type Cache interface {

	// get object from cache
	// example: Get("key", &obj)
	// @description: This function will combine  key and package path of object and name of object type to create a unique key for cache.
	// @param key: string, key of object in cache, actually it is a part of real cache key
	Get(ctx context.Context, key string, dest interface{}) bool // Lấy giá trị từ cache

	// @description: This function will combine  key and package path of object and name of object type to create a unique key for cache.
	// @param key: string, key of object in cache, actually it is a part of real cache key
	// @param value: interface{}, value of object to store in cache
	// @param ttl: time.Duration, time to live of object in cache 0 is default value which means no expiration
	Set(ctx context.Context, key string, value interface{}, ttl time.Duration) // Đặt giá trị vào cache với TTL
	// Đặt giá trị vào cache với TTL
	Delete(ctx context.Context, key string) // Xóa một key khỏi cache
	Close() error                           // Đóng kết nối/giải phóng tài nguyên của cache
}

// === Triển khai InMemoryCache sử dụng github.com/patrickmn/go-cache ===

// InMemoryCache là triển khai của Cache interface sử dụng go-cache
// duoi day la tai lieu mo ta cach tao model trong thu vien vdb
# Hướng dẫn tạo Model bằng thư viện `vdb` trong Go

Thư viện `vdb` cung cấp một cách tiện lợi để định nghĩa các model trong Go, ánh xạ chúng với cơ sở dữ liệu quan hệ. Hướng dẫn này sẽ giải thích cách tạo model, cấu hình các trường, chỉ mục, khóa ngoại, và đăng ký model với `vdb`.

## 1. Cấu trúc cơ bản của một Model

Mỗi model là một struct Go được nhúng với `vdb.Model[T]` để chỉ định loại của model. Struct này thường bao gồm các trường ánh xạ tới các cột trong cơ sở dữ liệu, cùng với các tag `db` để định nghĩa thuộc tính của cột.

Ví dụ về một model đơn giản:

```go
type Department struct {
    vdb.Model[Department]
    ID       int    `db:"pk;auto"`
    Name     string `db:"size:100;uk:uq_dept_name"`
    Code     string `db:"size:20;uk:uq_dept_code"`
    ParentID *int
    BaseModel
}
```

- `vdb.Model[Department]`: Nhúng để đánh dấu struct là một model của `vdb`.
- Các trường như `ID`, `Name`, `Code`, `ParentID` ánh xạ tới các cột trong bảng cơ sở dữ liệu.
- `BaseModel`: Một struct cơ sở có thể được nhúng để thêm các trường chung như `CreatedAt`, `UpdatedAt`.

## 2. Các tag `db` phổ biến

Tag `db` được sử dụng để cấu hình các thuộc tính của cột trong cơ sở dữ liệu. Dưới đây là các tag phổ biến:

- `pk`: Đánh dấu trường là khóa chính.
- `auto`: Cho biết khóa chính được tự động tăng (auto-increment).
- `size:N`: Xác định độ dài tối đa của trường (dùng cho `string`).
- `type:<type>`: Chỉ định kiểu dữ liệu của cột (ví dụ: `date`, `time`, `decimal(15,2)`, `char(7)`).
- `idx`: Tạo chỉ mục (index) cho trường.
- `idx:<index_name>`: Tạo chỉ mục với tên cụ thể.
- `uk:<unique_key_name>`: Tạo ràng buộc duy nhất (unique key) với tên cụ thể.
- `fk(<Table.Column>)`: Định nghĩa khóa ngoại trỏ đến cột của bảng khác.
- `default:<value>`: Đặt giá trị mặc định (ví dụ: `default:now` cho thời gian hiện tại).

Ví dụ:

```go
type Salary struct {
    vdb.Model[Salary]
    ID        int     `db:"pk;auto"`
    UserID    int     `db:"idx:idx_salary_user"`
    Month     string  `db:"type:char(7);idx:idx_salary_month"`
    Base      float64 `db:"type:decimal(15,2)"`
}
```

## 3. Nhúng BaseModel

`BaseModel` là một struct cơ sở chứa các trường chung thường được sử dụng trong nhiều model, chẳng hạn như thời gian tạo và cập nhật.

```go
type BaseModel struct {
    CreatedAt   *time.Time `db:"default:now;idx"`
    UpdatedAt   *time.Time `db:"default:now;idx"`
    Description *string    `db:"size:255"`
}
```

- Nhúng `BaseModel` vào model để kế thừa các trường này.
- Các trường trong `BaseModel` sẽ tự động được ánh xạ vào bảng cơ sở dữ liệu.

## 4. Định nghĩa khóa ngoại (Foreign Key)

Khóa ngoại được cấu hình bằng cách sử dụng phương thức `AddForeignKey` trong hàm `init()` của package. Cú pháp:

```go
(&ModelName{}).AddForeignKey(
    "FieldName",      // Tên trường trong model
    &ReferenceModel{}, // Model tham chiếu
    "ReferenceField", // Trường tham chiếu trong model tham chiếu
    &vdb.CascadeOption{ // Tùy chọn cascade (nếu có)
        OnDelete: false,
        OnUpdate: false,
    },
)
```

Ví dụ:

```go
func init() {
    (&Department{}).AddForeignKey("ParentID", &Department{}, "ID", &vdb.CascadeOption{
        OnDelete: false,
        OnUpdate: false,
    })
}
```

Trong ví dụ trên, `ParentID` trong `Department` tham chiếu đến `ID` của chính bảng `Department`, tạo mối quan hệ tự tham chiếu.

## 5. Đăng ký Model với `vdb.ModelRegistry`

Để `vdb` nhận diện và xử lý model, bạn cần đăng ký model bằng cách sử dụng `vdb.ModelRegistry.Add`. Điều này thường được thực hiện trong hàm `init()`.

```go
func init() {
    vdb.ModelRegistry.Add(&ModelName{})
}
```

Ví dụ:

```go
func init() {
    vdb.ModelRegistry.Add(&LeaveRequest{})
    (&LeaveRequest{}).AddForeignKey("EmployeeId", &Employee{}, "ID", nil)
}
```

Bạn cũng có thể đăng ký nhiều model cùng lúc:

```go
func init() {
    vdb.ModelRegistry.Add(
        &Contract{},
        &User{},
        &Department{},
        &Position{},
    )
}
```

## 6. Xử lý các trường tùy chọn

Các trường có thể là con trỏ (`*int`, `*string`, `*time.Time`) để cho phép giá trị `NULL` trong cơ sở dữ liệu. Ví dụ:

```go
type User struct {
    vdb.Model[User]
    ID           int     `db:"pk;auto"`
    UserId       *string `db:"size:36;unique"`
    Email        string  `db:"uk:uq_email;size:150"`
    Phone        string  `db:"size:20"`
    Username     *string `db:"size:50;unique"`
    HashPassword *string `db:"size:100"`
    BaseModel
}
```

- `UserId`, `Username`, `HashPassword` là con trỏ, cho phép giá trị `NULL`.
- `Email` và `Phone` là kiểu `string` thông thường, không cho phép `NULL`.

## 7. Ví dụ đầy đủ: Tạo Model Employee

Dưới đây là một ví dụ đầy đủ về cách định nghĩa một model `Employee`, bao gồm khóa ngoại và đăng ký với `vdb`:

```go
package models

import "vdb"

type Employee struct {
    vdb.Model[Employee]
    ID           int    `db:"pk;auto"`
    FirstName    string `db:"size:50;idx"`
    LastName     string `db:"size:50;idx"`
    DepartmentID int    `db:"fk(Department.ID)"`
    PositionID   int    `db:"fk(Position.ID)"`
    UserID       int    `db:"fk(User.ID)"`
    BaseModel
}

func init() {
    vdb.ModelRegistry.Add(&Employee{})
    (&Employee{}).AddForeignKey("DepartmentID", &Department{}, "ID", nil).
        AddForeignKey("PositionID", &Position{}, "ID", nil).
        AddForeignKey("UserID", &User{}, "ID", nil)
}
```

- `Employee` có các khóa ngoại trỏ đến `Department`, `Position`, và `User`.
- Các trường `FirstName` và `LastName` có chỉ mục để tối ưu hóa tìm kiếm.

## 8. Lưu ý quan trọng

- **Định nghĩa bảng**: Sử dụng tag `db:"table:<table_name>"` nếu tên bảng không giống tên struct.
- **Kiểu dữ liệu**: Đảm bảo ánh xạ đúng giữa kiểu Go và kiểu cơ sở dữ liệu (ví dụ: `time.Time` cho `date` hoặc `timestamp`).
- **Đăng ký model**: Luôn đăng ký model với `vdb.ModelRegistry.Add` để `vdb` có thể quản lý schema.
- **Khóa ngoại**: Sử dụng `AddForeignKey` để đảm bảo tính toàn vẹn tham chiếu.
- **Cascade**: Cân nhắc sử dụng `CascadeOption` cho các hành vi `ON DELETE` hoặc `ON UPDATE` nếu cần.

## 9. Kết luận

Thư viện `vdb` cung cấp một cách mạnh mẽ và linh hoạt để định nghĩa các model trong Go, với hỗ trợ đầy đủ cho khóa chính, khóa ngoại, chỉ mục, và các ràng buộc cơ sở dữ liệu. Bằng cách tuân theo các bước trên, bạn có thể dễ dàng tạo và quản lý các model ánh xạ tới cơ sở dữ liệu một cách hiệu quả.

// duoi day la tai lieu mo ta thu vien vdb cach thao tac du lieu
# Hướng dẫn sử dụng thư viện `vdb` trong Go

Thư viện `vdb` cung cấp một cách tiện lợi để làm việc với cơ sở dữ liệu trong Go, hỗ trợ quản lý tenant database, thực hiện các thao tác CRUD (Create, Read, Update, Delete), và xử lý các truy vấn phức tạp như join. Tài liệu này hướng dẫn cách sử dụng `vdb` dựa trên các ví dụ test được cung cấp.

## 1. Thiết lập cơ bản

### 1.1. Khởi tạo database quản lý tenant
Để sử dụng `vdb`, trước tiên cần thiết lập database quản lý tenant. Database này không tự động migrate các model, mà chỉ dùng để quản lý thông tin tenant.

```go
vdb.SetManagerDb("mysql", "tenant_manager")
```

- **Hàm `SetManagerDb`**:
  - **Tham số**: 
    - `driver`: Loại driver database (`mysql`, `sqlserver`, `postgres`).
    - `dbName`: Tên database quản lý tenant.
  - **Ý nghĩa**: Chỉ định database quản lý tenant để `vdb` thực hiện các thao tác liên quan.

### 1.2. Khởi tạo kết nối database
Sử dụng hàm `initDb` để khởi tạo kết nối với database quản lý tenant.

```go
func initDb(driver string, conn string) {
    var err error
    db, err = vdb.Open(driver, conn)
    if err != nil {
        panic(err)
    }
    err = db.Ping()
    if err != nil {
        panic(err)
    }
}
```

- **Hàm `vdb.Open`**:
  - **Tham số**:
    - `driver`: Tên driver (`mysql`, `sqlserver`, `postgres`).
    - `conn`: Chuỗi kết nối (connection string).
  - **Kết quả**: Trả về đối tượng `*vdb.TenantDB` để quản lý tenant.
- **Kiểm tra kết nối**: Sử dụng `db.Ping()` để đảm bảo kết nối thành công.

### 1.3. Tạo database tenant
Tạo một database tenant mới bằng hàm `CreateDB`.

```go
testDb, err = db.CreateDB("test001")
assert.NoError(t, err)
assert.Equal(t, "test001", testDb.GetDBName())
```

- **Hàm `CreateDB`**:
  - **Tham số**: Tên database tenant (ví dụ: `test001`).
  - **Kết quả**: Trả về đối tượng `*vdb.TenantDB` đại diện cho tenant database mới.
- **Lưu ý**: Đảm bảo database quản lý tenant đã được thiết lập trước khi gọi `CreateDB`.

## 2. Thao tác CRUD với `vdb`

### 2.1. Thêm bản ghi (Insert)
Sử dụng hàm `Insert` để thêm một hoặc nhiều bản ghi vào database.

```go
user := &models.User{
    UserId:       vdb.Ptr(uuid.NewString()),
    Email:        "test@test.com",
    Phone:        "0987654321",
    Username:     vdb.Ptr("test001"),
    HashPassword: vdb.Ptr("123456"),
    BaseModel: models.BaseModel{
        Description: vdb.Ptr("test"),
        CreatedAt:   vdb.Ptr(time.Now()),
    },
}
err := testDb.Insert(user)
```

- **Hàm `vdb.Ptr`**:
  - Chuyển đổi giá trị thành con trỏ (`*T`) để hỗ trợ các trường có thể là `NULL`.
  - Ví dụ: `vdb.Ptr("test001")` trả về `*string`.
- **Hàm `Insert`**:
  - **Tham số**: Một hoặc nhiều struct model (ví dụ: `user`, `position`, `dept`).
  - **Xử lý lỗi**:
    - Nếu xảy ra lỗi, kiểm tra kiểu lỗi bằng `*vdb.DialectError`:
      ```go
      if vdbErr, ok := err.(*vdb.DialectError); ok {
          if vdbErr.ErrorType == vdb.DIALECT_DB_ERROR_TYPE_DUPLICATE {
              assert.Equal(t, []string{"Email"}, vdbErr.Fields)
              assert.Equal(t, []string{"email"}, vdbErr.DbCols)
              assert.Equal(t, "users", vdbErr.Table)
          }
      }
      ```
    - Các loại lỗi:
      - `DIALECT_DB_ERROR_TYPE_DUPLICATE`: Vi phạm ràng buộc duy nhất.
      - `DIALECT_DB_ERROR_TYPE_REFERENCES`: Vi phạm ràng buộc khóa ngoại.
      - `DIALECT_DB_ERROR_TYPE_REQUIRED`: Thiếu trường bắt buộc.
      - `DIALECT_DB_ERROR_TYPE_LIMIT_SIZE`: Vượt quá kích thước trường.

- **Thêm nhiều bản ghi trong transaction**:
  ```go
  tx, err := testDb.Begin()
  err = testDb.Insert(position, dept, user)
  if err != nil {
      tx.Rollback()
  } else {
      tx.Commit()
  }
  ```
  - Sử dụng `Begin`, `Commit`, `Rollback` để quản lý transaction, đảm bảo tính toàn vẹn dữ liệu.

### 2.2. Truy vấn bản ghi (Read)
Sử dụng hàm `First` để lấy bản ghi đầu tiên khớp với điều kiện.

```go
user := &models.User{}
err := testDb.First(user, "id = ?", 1)
assert.NoError(t, err)
assert.Equal(t, "test001", *user.Username)
```

- **Hàm `First`**:
  - **Tham số**:
    - Struct model để lưu kết quả.
    - Điều kiện truy vấn (ví dụ: `"id = ?"`).
    - Các tham số thay thế cho `?`.
  - **Kết quả**: Điền dữ liệu vào struct model và trả về lỗi nếu có.

### 2.3. Cập nhật bản ghi (Update)
`vdb` hỗ trợ nhiều cách cập nhật bản ghi:

#### a. Cập nhật một trường
```go
result := testDb.Model(&models.User{}).Where("id = ?", 1).Update("Username", "test002")
assert.NoError(t, result.Error)
assert.Equal(t, int64(1), result.RowsAffected)
```

- **Hàm `Update`**:
  - **Tham số**:
    - Tên trường (theo PascalCase).
    - Giá trị mới.
  - **Kết quả**: Trả về đối tượng `result` với `RowsAffected` (số dòng bị ảnh hưởng).

#### b. Cập nhật nhiều trường bằng map
```go
result := testDb.Model(&models.User{}).Where("id = ?", 1).Update(
    map[string]interface{}{
        "Username": "test003",
        "Email":    "william.henry.harrison@example-pet-store.com",
    },
)
```

- **Sử dụng map**:
  - Key là tên field (không phân biệt hoa thường, `vdb` tự động ánh xạ).
  - Value là giá trị mới.

#### c. Cập nhật với hàm database
Sử dụng `vdb.DbFunCall` để gọi hàm database trong câu lệnh update.

```go
result := testDb.Model(&models.User{}).Where("id = ?", 1).Update(
    "Username", vdb.DbFunCall("CONCAT(UPPER(Username),?)", "test003"))
```

- **Hàm `DbFunCall`**:
  - **Tham số**:
    - `expr`: Tên hàm database (ví dụ: `CONCAT`, `UPPER`, `LOWER`).
    - `args`: Các tham số truyền vào hàm.
  - **Ví dụ**: `CONCAT(UPPER(Username), 'test003')` nối chuỗi `Username` (viết hoa) với `test003`.

#### d. Kết hợp map và hàm database
```go
result := testDb.Model(&models.User{}).Where("email like ?", testDb.LikeValue("*.edu")).Update(
    map[string]interface{}{
        "Username":    vdb.DbFunCall("lower(Username)"),
        "Email":       vdb.DbFunCall("CONCAT(UPPER(Email),?)", ".com"),
        "phone":       vdb.DbFunCall("CONCAT(LEFT(Phone,3),?)", "-123456"),
        "description": "Hệ thống sẽ tự động sửa tên field đúng với tên field trong database",
    },
)
```

- **Hàm `LikeValue`**:
  - Chuyển đổi mẫu `LIKE` (ví dụ: `*.edu` → `%.edu` cho MySQL).
- **Lưu ý**: `vdb` tự động ánh xạ tên field không phân biệt hoa thường sang tên cột trong database.

## 3. Truy vấn phức tạp (Join)

### 3.1. Inner Join, Left Join, Right Join, Full Join
Sử dụng các hàm join như `LeftJoin` để kết hợp dữ liệu từ nhiều bảng.

```go
type QueryResult struct {
    FullName     *string
    PositionID   *int64
    DepartmentID *int64
    Email        *string
    Phone        *string
}
items := []QueryResult{}
qr := testDb.From((&models.Employee{}).As("e")).LeftJoin(
    (&models.User{}).As("u"), "e.id = u.userId",
).Select(
    "concat(e.FirstName,' ', e.LastName) as fullName",
    "e.positionId",
    "e.departmentId",
    "u.email",
    "u.phone",
)
err := qr.ToArray(&items)
```

- **Hàm `From` và `As`**:
  - `From`: Chỉ định bảng chính (model).
  - `As`: Đặt bí danh (alias) cho bảng.
- **Hàm `LeftJoin`**:
  - **Tham số**:
    - Model và bí danh của bảng được join.
    - Điều kiện join (ví dụ: `e.id = u.userId`).
- **Hàm `Select`**:
  - Chỉ định các cột hoặc biểu thức (ví dụ: `concat(e.FirstName,' ', e.LastName) as fullName`).
- **Hàm `ToArray`**:
  - Điền kết quả truy vấn vào slice của struct (ví dụ: `[]QueryResult`).

### 3.2. Self Join
Sử dụng self-join để truy vấn mối quan hệ trong cùng một bảng.

```go
type QueryResult struct {
    Name      *string
    ChildName *string
}
items := []QueryResult{}
qr := testDb.From(
    (&models.Department{}).As("d"),
).LeftJoin(
    (&models.Department{}).As("c"), "d.id = c.parentId",
).Select(
    "d.name",
    "c.name as childName",
)
err := qr.ToArray(&items)
```

- **Lưu ý**:
  - Các trường trong `QueryResult` phải là **PascalCase** vì Go chỉ điền giá trị vào các field exported.
  - `vdb` tự động chuyển tên cột sang PascalCase để ánh xạ vào struct.

## 4. Lưu ý quan trọng

- **Đăng ký model**: Đảm bảo các model được đăng ký trong `vdb.ModelRegistry` (thường trong hàm `init` của package `models`).
- **Transaction**: Sử dụng `Begin`, `Commit`, `Rollback` khi thực hiện nhiều thao tác để đảm bảo tính toàn vẹn dữ liệu.
- **Xử lý lỗi**: Kiểm tra lỗi `vdb.DialectError` để xác định nguyên nhân cụ thể (duplicate, references, required, v.v.).
- **Field không phân biệt hoa thường**: `vdb` tự động ánh xạ tên field (ví dụ: `phone` hoặc `Phone`) sang tên cột trong database.
- **Driver hỗ trợ**: Hiện tại, `vdb` hỗ trợ `mysql`, `sqlserver`, và `postgres`.

## 5. Kết luận

Thư viện `vdb` cung cấp một giao diện mạnh mẽ và linh hoạt để làm việc với cơ sở dữ liệu trong Go, đặc biệt phù hợp với mô hình multi-tenant. Với các tính năng như quản lý tenant, CRUD, join, và hỗ trợ hàm database, `vdb` giúp đơn giản hóa việc phát triển ứng dụng cơ sở dữ liệu. Hãy đảm bảo thiết lập đúng database quản lý tenant và đăng ký các model trước khi sử dụng.
Yeu cau
Hay xay duong 1 service Account
 để quản lý tài khoản, đăng ký, đăng nhập, xác thực, và nhiều hơn nữa.
 Luu y: neu can tao bang account de quan ly