// Code generated by ent, DO NOT EDIT.

package ent

import (
	"check/ent/order"
	"check/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks     []Hook
	mutation  *OrderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetOrderID sets the "order_id" field.
func (ou *OrderUpdate) SetOrderID(u uint64) *OrderUpdate {
	ou.mutation.ResetOrderID()
	ou.mutation.SetOrderID(u)
	return ou
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableOrderID(u *uint64) *OrderUpdate {
	if u != nil {
		ou.SetOrderID(*u)
	}
	return ou
}

// AddOrderID adds u to the "order_id" field.
func (ou *OrderUpdate) AddOrderID(u int64) *OrderUpdate {
	ou.mutation.AddOrderID(u)
	return ou
}

// SetVersion sets the "version" field.
func (ou *OrderUpdate) SetVersion(i int) *OrderUpdate {
	ou.mutation.ResetVersion()
	ou.mutation.SetVersion(i)
	return ou
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableVersion(i *int) *OrderUpdate {
	if i != nil {
		ou.SetVersion(*i)
	}
	return ou
}

// AddVersion adds i to the "version" field.
func (ou *OrderUpdate) AddVersion(i int) *OrderUpdate {
	ou.mutation.AddVersion(i)
	return ou
}

// SetNote sets the "note" field.
func (ou *OrderUpdate) SetNote(s string) *OrderUpdate {
	ou.mutation.SetNote(s)
	return ou
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableNote(s *string) *OrderUpdate {
	if s != nil {
		ou.SetNote(*s)
	}
	return ou
}

// SetCreatedAt sets the "created_at" field.
func (ou *OrderUpdate) SetCreatedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetCreatedAt(t)
	return ou
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCreatedAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetCreatedAt(*t)
	}
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OrderUpdate) SetUpdatedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableUpdatedAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetUpdatedAt(*t)
	}
	return ou
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ou *OrderUpdate) ClearUpdatedAt() *OrderUpdate {
	ou.mutation.ClearUpdatedAt()
	return ou
}

// SetCreatedBy sets the "created_by" field.
func (ou *OrderUpdate) SetCreatedBy(s string) *OrderUpdate {
	ou.mutation.SetCreatedBy(s)
	return ou
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCreatedBy(s *string) *OrderUpdate {
	if s != nil {
		ou.SetCreatedBy(*s)
	}
	return ou
}

// SetUpdatedBy sets the "updated_by" field.
func (ou *OrderUpdate) SetUpdatedBy(s string) *OrderUpdate {
	ou.mutation.SetUpdatedBy(s)
	return ou
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableUpdatedBy(s *string) *OrderUpdate {
	if s != nil {
		ou.SetUpdatedBy(*s)
	}
	return ou
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ou *OrderUpdate) ClearUpdatedBy() *OrderUpdate {
	ou.mutation.ClearUpdatedBy()
	return ou
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OrderUpdate) check() error {
	if v, ok := ou.mutation.Note(); ok {
		if err := order.NoteValidator(v); err != nil {
			return &ValidationError{Name: "note", err: fmt.Errorf(`ent: validator failed for field "Order.note": %w`, err)}
		}
	}
	if v, ok := ou.mutation.CreatedBy(); ok {
		if err := order.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Order.created_by": %w`, err)}
		}
	}
	if v, ok := ou.mutation.UpdatedBy(); ok {
		if err := order.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Order.updated_by": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ou *OrderUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderUpdate {
	ou.modifiers = append(ou.modifiers, modifiers...)
	return ou
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.OrderID(); ok {
		_spec.SetField(order.FieldOrderID, field.TypeUint64, value)
	}
	if value, ok := ou.mutation.AddedOrderID(); ok {
		_spec.AddField(order.FieldOrderID, field.TypeUint64, value)
	}
	if value, ok := ou.mutation.Version(); ok {
		_spec.SetField(order.FieldVersion, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedVersion(); ok {
		_spec.AddField(order.FieldVersion, field.TypeInt, value)
	}
	if value, ok := ou.mutation.Note(); ok {
		_spec.SetField(order.FieldNote, field.TypeString, value)
	}
	if value, ok := ou.mutation.CreatedAt(); ok {
		_spec.SetField(order.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	if ou.mutation.UpdatedAtCleared() {
		_spec.ClearField(order.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ou.mutation.CreatedBy(); ok {
		_spec.SetField(order.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := ou.mutation.UpdatedBy(); ok {
		_spec.SetField(order.FieldUpdatedBy, field.TypeString, value)
	}
	if ou.mutation.UpdatedByCleared() {
		_spec.ClearField(order.FieldUpdatedBy, field.TypeString)
	}
	_spec.AddModifiers(ou.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetOrderID sets the "order_id" field.
func (ouo *OrderUpdateOne) SetOrderID(u uint64) *OrderUpdateOne {
	ouo.mutation.ResetOrderID()
	ouo.mutation.SetOrderID(u)
	return ouo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableOrderID(u *uint64) *OrderUpdateOne {
	if u != nil {
		ouo.SetOrderID(*u)
	}
	return ouo
}

// AddOrderID adds u to the "order_id" field.
func (ouo *OrderUpdateOne) AddOrderID(u int64) *OrderUpdateOne {
	ouo.mutation.AddOrderID(u)
	return ouo
}

// SetVersion sets the "version" field.
func (ouo *OrderUpdateOne) SetVersion(i int) *OrderUpdateOne {
	ouo.mutation.ResetVersion()
	ouo.mutation.SetVersion(i)
	return ouo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableVersion(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetVersion(*i)
	}
	return ouo
}

// AddVersion adds i to the "version" field.
func (ouo *OrderUpdateOne) AddVersion(i int) *OrderUpdateOne {
	ouo.mutation.AddVersion(i)
	return ouo
}

// SetNote sets the "note" field.
func (ouo *OrderUpdateOne) SetNote(s string) *OrderUpdateOne {
	ouo.mutation.SetNote(s)
	return ouo
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableNote(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetNote(*s)
	}
	return ouo
}

// SetCreatedAt sets the "created_at" field.
func (ouo *OrderUpdateOne) SetCreatedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetCreatedAt(t)
	return ouo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCreatedAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetCreatedAt(*t)
	}
	return ouo
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OrderUpdateOne) SetUpdatedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableUpdatedAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetUpdatedAt(*t)
	}
	return ouo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ouo *OrderUpdateOne) ClearUpdatedAt() *OrderUpdateOne {
	ouo.mutation.ClearUpdatedAt()
	return ouo
}

// SetCreatedBy sets the "created_by" field.
func (ouo *OrderUpdateOne) SetCreatedBy(s string) *OrderUpdateOne {
	ouo.mutation.SetCreatedBy(s)
	return ouo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCreatedBy(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetCreatedBy(*s)
	}
	return ouo
}

// SetUpdatedBy sets the "updated_by" field.
func (ouo *OrderUpdateOne) SetUpdatedBy(s string) *OrderUpdateOne {
	ouo.mutation.SetUpdatedBy(s)
	return ouo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableUpdatedBy(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetUpdatedBy(*s)
	}
	return ouo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ouo *OrderUpdateOne) ClearUpdatedBy() *OrderUpdateOne {
	ouo.mutation.ClearUpdatedBy()
	return ouo
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ouo *OrderUpdateOne) Where(ps ...predicate.Order) *OrderUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OrderUpdateOne) check() error {
	if v, ok := ouo.mutation.Note(); ok {
		if err := order.NoteValidator(v); err != nil {
			return &ValidationError{Name: "note", err: fmt.Errorf(`ent: validator failed for field "Order.note": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.CreatedBy(); ok {
		if err := order.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Order.created_by": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.UpdatedBy(); ok {
		if err := order.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Order.updated_by": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ouo *OrderUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderUpdateOne {
	ouo.modifiers = append(ouo.modifiers, modifiers...)
	return ouo
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.OrderID(); ok {
		_spec.SetField(order.FieldOrderID, field.TypeUint64, value)
	}
	if value, ok := ouo.mutation.AddedOrderID(); ok {
		_spec.AddField(order.FieldOrderID, field.TypeUint64, value)
	}
	if value, ok := ouo.mutation.Version(); ok {
		_spec.SetField(order.FieldVersion, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedVersion(); ok {
		_spec.AddField(order.FieldVersion, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.Note(); ok {
		_spec.SetField(order.FieldNote, field.TypeString, value)
	}
	if value, ok := ouo.mutation.CreatedAt(); ok {
		_spec.SetField(order.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	if ouo.mutation.UpdatedAtCleared() {
		_spec.ClearField(order.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.CreatedBy(); ok {
		_spec.SetField(order.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := ouo.mutation.UpdatedBy(); ok {
		_spec.SetField(order.FieldUpdatedBy, field.TypeString, value)
	}
	if ouo.mutation.UpdatedByCleared() {
		_spec.ClearField(order.FieldUpdatedBy, field.TypeString)
	}
	_spec.AddModifiers(ouo.modifiers...)
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
