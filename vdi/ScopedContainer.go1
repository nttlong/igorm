package vdi

import (
	"fmt"
	"reflect"
	"sync"
)

type ScopedContainer struct {
	parent    *RootContainer
	scoped    sync.Map
	Owner     *RootContainer
	instances map[reflect.Type]any
	factories map[reflect.Type]any
}

func (s *ScopedContainer) RegisterSingleton(factory any) {
	s.parent.RegisterSingleton(factory)
}

func (s *ScopedContainer) RegisterScoped(factory any) {
	t := factoryType(factory)
	s.parent.mu.Lock()
	defer s.parent.mu.Unlock()
	s.parent.factories[t] = &lifecycleEntry{
		factory: factory,
		mode:    scoped,
	}
}

func (s *ScopedContainer) RegisterTransient(factory any) {
	s.parent.RegisterTransient(factory)
}

func (c *ScopedContainer) Resolve(name string) (any, error) {
	return nil, fmt.Errorf("Resolve by name is not implemented") // placeholder
}

func (s *ScopedContainer) CreateScope() Container {
	return NewScopedContainer(s.parent)
}
func (c *ScopedContainer) RegisterScopedType(name string, factory any) {
	// Bỏ qua "name" nếu chưa hỗ trợ named service
	c.RegisterScoped(factory)
}
func (c *ScopedContainer) RegisterSingletonType(name string, factory any) {
	// Hiện tại chưa hỗ trợ "name", nên chỉ dùng factory
	c.RegisterSingleton(factory)
}
func (c *ScopedContainer) RegisterTransientType(name string, factory any) {
	c.RegisterTransient(factory)
}
func (c *ScopedContainer) ResolveByType(t reflect.Type) (any, error) {
	// Transient: luôn tạo mới, không cache
	if isTransient, ok := c.transientTypes[t]; ok && isTransient {
		factory, ok := c.factories[t]
		if !ok && c.parent != nil {
			factory, ok = c.parent.GetFactory(t)
		}
		if !ok {
			return nil, fmt.Errorf("type %v not registered", t)
		}
		return callFactory(factory, c)
	}

	// Scoped: cache theo scope
	if val, ok := c.instances[t]; ok {
		return val, nil
	}

	factory, ok := c.factories[t]
	if !ok && c.parent != nil {
		factory, ok = c.parent.GetFactory(t)
	}
	if !ok {
		return nil, fmt.Errorf("type %v not registered", t)
	}

	result, err := callFactory(factory, c)
	if err != nil {
		return nil, err
	}
	c.instances[t] = result
	return result, nil
}

// Thêm ResolveByType

func (sc *ScopedContainer) GetFactory(t reflect.Type) (func(Container) any, bool) {
	return sc.Owner.GetFactory(t)
}
