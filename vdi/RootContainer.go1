package vdi

import (
	"reflect"
	"sync"
)

// RootContainer là container gốc quản lý các factory theo loại và vòng đời.
type RootContainer struct {
	typeFactories  map[reflect.Type]func(Container) any
	transientTypes map[reflect.Type]bool
	mu             sync.RWMutex
}

func NewRootContainer() *RootContainer {
	return &RootContainer{
		typeFactories:  make(map[reflect.Type]func(Container) any),
		transientTypes: make(map[reflect.Type]bool),
	}
}

func (c *RootContainer) RegisterSingleton(factory any) {
	t := factoryType(factory)
	var once sync.Once
	var instance any

	c.mu.Lock()
	defer c.mu.Unlock()
	c.typeFactories[t] = func(_ Container) any {
		once.Do(func() {
			instance = callFactoryMust(factory, nil)
		})
		return instance
	}
}

func (c *RootContainer) RegisterScoped(factory any) {
	t := factoryType(factory)

	c.mu.Lock()
	defer c.mu.Unlock()
	c.typeFactories[t] = func(scope Container) any {
		return callFactoryMust(factory, scope)
	}
}

func (c *RootContainer) RegisterTransient(factory any) {
	t := factoryType(factory)

	c.mu.Lock()
	defer c.mu.Unlock()
	c.typeFactories[t] = func(scope Container) any {
		return callFactoryMust(factory, scope)
	}
	c.transientTypes[t] = true
}

func (c *RootContainer) GetFactory(t reflect.Type) (func(Container) any, bool) {
	c.mu.RLock()
	defer c.mu.RUnlock()
	f, ok := c.typeFactories[t]
	return f, ok
}

func (c *RootContainer) IsTransient(t reflect.Type) bool {
	c.mu.RLock()
	defer c.mu.RUnlock()
	return c.transientTypes[t]
}

// ScopedContainer giữ các instance theo scope
func (c *RootContainer) CreateScope() *ScopedContainer {
	return &ScopedContainer{
		factories: make(map[reflect.Type]func(Container) any),
		instances: make(map[reflect.Type]any),
		parent:    c,
		root:      c,
	}
}
